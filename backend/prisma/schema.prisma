generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int         @id @default(autoincrement())
  email       String      @unique
  name        String?
  password    String?
  googleId    String?     @unique
  githubId    String?     @unique
  isAdmin     Boolean     @default(false)
  blocked     Boolean     @default(false)
  theme       String?     @default("light")
  language    String?     @default("en")
  inventories Inventory[]
  items       Item[]     
  posts       Post[]
  createdAt   DateTime    @default(now())
  updatedAt   DateTime    @updatedAt
}

model Inventory {
  id             Int      @id @default(autoincrement())
  title          String
  description    String?
  category       String
  public         Boolean  @default(false)
  ownerId        Int
  owner          User     @relation(fields: [ownerId], references: [id])
  items          Item[]
  customFields   Json?
  customIdFormat Json?
  tags           Json?
  version        Int      @default(1)
  createdAt      DateTime @default(now())
  updatedAt      DateTime @updatedAt
  posts          Post[]

  @@index([ownerId])
}

model Item {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  createdById Int
  createdBy   User      @relation(fields: [createdById], references: [id])
  customId    String
  fields      Json?
  likes       Int       @default(0)
  version     Int       @default(1)
  createdAt   DateTime  @default(now())
  updatedAt   DateTime  @updatedAt

  @@unique([inventoryId, customId]) // Enforces unique customId per inventory
  @@index([inventoryId])
}

model Post {
  id          Int       @id @default(autoincrement())
  inventoryId Int
  inventory   Inventory @relation(fields: [inventoryId], references: [id])
  authorId    Int
  author      User      @relation(fields: [authorId], references: [id])
  content     String
  createdAt   DateTime  @default(now())
}
